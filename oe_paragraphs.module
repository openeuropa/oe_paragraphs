<?php

/**
 * @file
 * OE Paragraphs module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\oe_paragraphs\Event\FlagOptionsEvent;
use Drupal\oe_paragraphs\Event\IconOptionsEvent;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function oe_paragraphs_entity_base_field_info(EntityTypeInterface $entity_type): array {
  $fields = [];

  if ($entity_type->id() !== 'paragraph') {
    return $fields;
  }

  $fields['oe_paragraphs_variant'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Variant'))
    ->setRequired(FALSE)
    ->setTranslatable(FALSE)
    ->setRevisionable(TRUE)
    ->setSetting('max_length', 255)
    ->setDisplayConfigurable('form', FALSE)
    ->setDisplayConfigurable('view', FALSE);

  return $fields;
}

/**
 * Sets dynamic allowed values for the icon field.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value icon options.
 *
 * @see options_allowed_values()
 */
function _oe_paragraphs_allowed_values_icons(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = TRUE) {
  $event = new IconOptionsEvent();

  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch($event, IconOptionsEvent::class);

  return $event->getIconOptions();
}

/**
 * Sets allowed values for the "Flag" field.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value flag options.
 *
 * @see options_allowed_values()
 */
function _oe_paragraphs_allowed_values_flags(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = TRUE): array {
  $event = new FlagOptionsEvent();

  \Drupal::service('event_dispatcher')->dispatch($event, FlagOptionsEvent::class);

  return $event->getFlagOptions();
}
